# for test
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet f
	function ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
# Immediate function
snippet (f
	(function(${1}) {
		${3:/* code */}
	})(${2});
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3: += 1}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# try
snippet try
	try {
		${1:/* code */}
	} catch(${2:e}) {
		${3:/* handle error */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# console.log (Firebug)
snippet cl
	console.log(${1});
# return
snippet re
	return ${1:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${3:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${1})
# docstring
snippet /**
	/**
	 * Copyright(c) 2013 BJ Tiankui <eric.prototype@gmail.com>
	 */
snippet @par
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3:// initial code ...}

		$1 = function ($2) {
			${4:// main code}
		};
	}
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};
		
		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3:// code ...}

		return instance;
	}
# Grunt 相关
snippet grunt registerTask
	grunt.registerTask('${1:foo'}',${'desctiption'},function($3){
		if(arguments.length === 0){
			$4
		}else{
			$5
		}	
	});	
snippet grunt registerNultiTask
	grunt.registerNultiTask('${1:foo'}',${'desctiption'},function($3){
		if(arguments.length === 0){
			$4
		}else{
			$5
		}	
	});
snippet grunt initConfig
	grunt.initConfig({
		lint:{
			all:[$1]
		},
		jshint:{
			options:{
				browser:true
			}
		}
	});
snippet grunt exports
	grunt.exports = function(grunt){
		$1
	};
snippet grunt loadNpmTasks
	grunt.loadNpmTasks('$1');
snippet grunt registerHelper
	grunt.registerHelper('${1:awesome}',function(){
		$1
	});
snippet grunt renameTask
	grunt.renameTask('${1:oldname}','${2:newname}');
snippet interval
	setTimeout(function(){
		var INTERVAL = ${1:1000};
		${2:coding...here};
		setTimeout(arguments.callee,INTERVAL);
	},INTERVAL);
snippet exp
	//去除多余空格
	var contextStr=contextStr.replace(/\s+/g,"");
snippet json
	var context = window['eval']('('+contextStr+')');
snippet req
	require('${1:module}')${2:;}
snippet json-parse
	_data = ((typeof ${1:data}).toUpperCase() === "OBJECT")?data:$.parseJSON(data);
# Node 相关
snippet #!
	#!/usr/bin/env node
# Node 模版相关
snippet <
	<%= ${1:Title} %>
snippet l
	console.log(${1:text});
snippet e
	exports.${1:app}
snippet me
	module.exports = ${1:app};
snippet mood
	var mood = function (){
	  var m = [ "^__^", "-___-;", ">.<", "<_>" ];
	  return m[Math.floor(Math.random(*m.length)];
	};
snippet rjs
	require(['${1:jquery}','${2:underscore}'],function(${3:$,_}){
		${4:content}
	});
snippet iferr
	if (err) {${1:throw err;}}
snippet pre
	e.preventDefault();
snippet require
	require(["${1:helper/util}"], function(${2:util}) {
	${3://This function is called when scripts/helper/util.js is loaded.
	//If util.js calls define(, then this function is not fired until
	//util's dependencies have loaded, and the util argument will hold
	//the module value for "helper/util".}
	});
